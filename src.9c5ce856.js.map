{"version":3,"sources":["js/task1.js","js/task2.js","js/task3.js","index.js"],"names":["delay","ms","promise","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","reject","map","user","updatedUsers","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","id","logSuccess","logError","warn","amount","catch"],"mappings":";;;AAAA,MAAMA,EAAQC,IAOHC,OANS,IAAIC,QAASC,IACzBC,WAAW,KACPD,EAAQH,IACTA,MAMLK,EAASC,GAAQC,QAAQC,sBAAsBF,OAKrDP,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,MAAMU,KAAKJ;;ACjBjB,MAAMK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGrBC,EAAkB,CAACC,EAAUC,IAExB,IAAIb,QAAQ,CAACC,EAASa,KACzBb,EAAQW,EAASG,IAAIC,GAAQA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,MAI5Fb,EAASc,GAAgBZ,QAAQa,MAAMD,GAW7CN,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ;;AC1BnC,MAAMgB,EAA4B,CAACC,EAAKC,IAC7BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGlDK,EAAmBC,IACf7B,MAAAA,EAAQsB,EAA0B,IAAK,KAYtCpB,OAXS,IAAIC,QAAQ,CAACC,EAASa,KAClCZ,WAAW,KACYoB,KAAKE,SAAW,GAG/BvB,EAAQ,CAACyB,EAAYC,GAAI9B,IAEzBiB,EAAOY,EAAYC,KAExB9B,MAOL+B,EAAa,EAAED,EAAIvB,MACrBC,QAAQC,mBAAmBqB,kBAAmBvB,SAG5CyB,EAAWF,IACbtB,QAAQyB,qCAAqCH,+BAejDF,EAAgB,CAAEE,GAAI,GAAII,OAAQ,MAC7BxB,KAAKqB,GACLI,MAAMH,GAEXJ,EAAgB,CAAEE,GAAI,GAAII,OAAQ,MAC7BxB,KAAKqB,GACLI,MAAMH,GAEXJ,EAAgB,CAAEE,GAAI,GAAII,OAAQ,KAC7BxB,KAAKqB,GACLI,MAAMH,GAEXJ,EAAgB,CAAEE,GAAI,GAAII,OAAQ,MAC7BxB,KAAKqB,GACLI,MAAMH;;ACrDX,aAHA,QAAA,oBACA,QAAA,cACA,QAAA,cACA,QAAA","file":"src.9c5ce856.js","sourceRoot":"../src","sourcesContent":["const delay = ms => {\n    const promise = new Promise((resolve) => {\n        setTimeout(() => {\n            resolve(ms);\n        }, ms)\n\n    });\n    return promise;\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms","const users = [\n    { name: 'Mango', active: true },\n    { name: 'Poly', active: false },\n    { name: 'Ajax', active: true },\n    { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n\n    return new Promise((resolve, reject) => {\n        resolve(allUsers.map(user => user.name === userName ? { ...user, active: !user.active } : user,));\n    });\n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\n/*\n * Сейчас работает так\n//  */\n// toggleUserState(users, 'Mango', logger);\n// toggleUserState(users, 'Lux', logger);\n\n/*\n * Должно работать так\n */\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);","const randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n    const delay = randomIntegerFromInterval(200, 500);\n    const promise = new Promise((resolve, reject) => {\n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n\n            if (canProcess) {\n                resolve([transaction.id, delay]);\n            } else {\n                reject(transaction.id);\n            }\n        }, delay);\n    });\n    return promise;\n\n\n};\n\nconst logSuccess = ([id, time]) => {\n    console.log(`Transaction ${id} processed in ${time} ms`);\n};\n\nconst logError = id => {\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n/*\n * Работает так\n */\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n/*\n * Должно работать так\n */\n\n\nmakeTransaction({ id: 70, amount: 150 })\n    .then(logSuccess)\n    .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n    .then(logSuccess)\n    .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n    .then(logSuccess)\n    .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n    .then(logSuccess)\n    .catch(logError);","import './sass/main.scss';\nimport './js/task1';\nimport './js/task2';\nimport './js/task3';\n"]}